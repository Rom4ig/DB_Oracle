delete from inputtable;
delete from outputtable;
delete from helpertable;
drop table helpertable;

create table helpertable
(
  datetime date,
  info nvarchar2(10),
  timeinfo timestamp
)

create table inputtable
(
  id INTEGER generated by default as identity,
  name varchar(100)
);

create table outputtable
(
  id INTEGER generated by default as identity,
  name varchar(100)
);

declare
  i number := 1;
  temp varchar(100);
begin
  loop
    temp := CONCAT('Value ', to_char(i));
    insert into inputtable (name) values (temp);
    i := i + 1;
  exit when i > 10;
  end loop;
end;

select * from inputtable;

CREATE OR REPLACE PACKAGE CHNPKG as
  PROCEDURE MOVEDATA;
  PROCEDURE STARTMOVE;
  function ISDONE return boolean;
  function ISACTUAL return boolean;
  procedure stopJob;
  procedure changeJob(newDate date);
  procedure deleteJob;
END CHNPKG;


CREATE OR REPLACE PACKAGE BODY CHNPKG as
  PROCEDURE MOVEDATA as
  temp inputtable%rowtype;
  begin
    select * into temp from inputtable where rownum = 1;
    insert into outputtable (id, name) values (temp.id, temp.name);
    delete from inputtable where rownum = 1;
    DBMS_OUTPUT.PUT_LINE('Data moved');
    insert into helpertable(datetime, info, timeinfo) values (sysdate, 'GOOD', current_timestamp);
  exception when others then 
    insert into helpertable(datetime, info, timeinfo) values (sysdate, 'ERROR', current_timestamp);
  end MOVEDATA;
  
  PROCEDURE STARTMOVE is
  begin
    dbms_job.ISUBMIT(job => 1,
                      what => 'begin CHNPKG.MOVEDATA; end;',
                      next_date => sysdate,
                      interval =>'sysdate + 7');
    commit;
    dbms_output.put_line('start move');
    exception when others then dbms_output.put_line(sqlerrm);
  end STARTMOVE;
  
  FUNCTION ISDONE RETURN BOOLEAN
  IS 
  temp nvarchar2(10) := 'false';
  BEGIN
    SELECT 'true' INTO temp FROM DUAL WHERE EXISTS (SELECT * FROM USER_JOBS WHERE JOB=1 AND LAST_DATE IS NOT NULL);
    if temp = 'true' then
      return true;
    else
      return false;
    end if;
  EXCEPTION WHEN OTHERS
    THEN RETURN FALSE;
  END ISDONE;
  
  FUNCTION ISACTUAL RETURN BOOLEAN
  IS 
  temp nvarchar2(10) := 'false';
  BEGIN
    SELECT 'true' INTO temp FROM DUAL WHERE EXISTS (SELECT * FROM USER_JOBS WHERE JOB=1 AND USER_JOBS.BROKEN='N');
    if temp = 'true' then
      return true;
    else
      return false;
    end if;
  EXCEPTION WHEN OTHERS
    THEN RETURN FALSE;
  END ISACTUAL;
  
  PROCEDURE stopJob
  IS
  BEGIN
    DBMS_JOB.BROKEN(1, TRUE);
    COMMIT;
  END;
  
  PROCEDURE changeJob(newDate date)
  as
  BEGIN
    DBMS_JOB.CHANGE(  job => 1,
                      what => 'begin CHNPKG.MOVEDATA; end;',
                      next_date => newDate,
                      interval =>'sysdate + 7');
    DBMS_JOB.RUN(1);
  END; 
  
  procedure deleteJob 
  as
  begin
    dbms_job.remove(1);
  end;
END CHNPKG;

------------------
exec CHNPKG.STARTMOVE;

declare
temp boolean;
temp2 boolean;
begin
  temp := CHNPKG.ISDONE;
  temp2 := CHNPKG.ISACTUAL;
  if temp = true then 
    dbms_output.put_line('done');
  else
    dbms_output.put_line('in process');
  end if;
  if temp2 = true then 
    dbms_output.put_line('not broken');
  else
    dbms_output.put_line('broken');
  end if;
end; 

begin chnpkg.stopJob; end;
begin chnpkg.changeJob('2.12.2018'); end;
begin chnpkg.deleteJob; end;

select * from user_jobs;
select * from INPUTTABLE;
select * from OUTPUTTABLE;
select * from helpertable;


----DBMS_SHEDULER
CREATE OR REPLACE PACKAGE CHNPKG2 as
  PROCEDURE MOVEHELPER;
  PROCEDURE STARTMOVE;
  function ISDONE return boolean;
  function ISACTUAL return boolean;
  procedure stopJob;
  procedure deleteJob;
END CHNPKG2;


CREATE OR REPLACE PACKAGE BODY CHNPKG2 as
  PROCEDURE MOVEHELPER as
  temp inputtable%rowtype;
  begin
    select * into temp from inputtable where rownum = 1;
    insert into outputtable (id, name) values (temp.id, temp.name);
    delete from inputtable where rownum = 1;
    DBMS_OUTPUT.PUT_LINE('Done');
    insert into helpertable(datetime, info, timeinfo) values (sysdate, 'GOOD', current_timestamp);
  exception when others then 
    insert into helpertable(datetime, info, timeinfo) values (sysdate, 'ERROR', current_timestamp);
  end MOVEHELPER;
  
  PROCEDURE STARTMOVE is
  begin
    DBMS_SCHEDULER.create_job (
    job_name        => 'test_full_job_definition',
    job_type        => 'PLSQL_BLOCK',
    job_action      => 'BEGIN chnpkg2.movehelper; END;',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'freq=MINUTELY;',
    end_date        => NULL,
    enabled         => TRUE);
    commit;
    dbms_output.put_line('start move');
  exception when others then
    dbms_output.put_line(sqlerrm);
  end startmove;
  
  FUNCTION ISDONE RETURN BOOLEAN
  IS 
  temp nvarchar2(10) := 'false';
  BEGIN
    SELECT 'true' INTO temp FROM DUAL WHERE EXISTS (SELECT * FROM all_scheduler_jobs where job_name = 'TEST_FULL_JOB_DEFINITION' AND RUN_COUNT>0);
    if temp = 'true' then
      return true;
    else
      return false;
    end if;
  EXCEPTION WHEN OTHERS
    THEN RETURN FALSE;
  END ISDONE;
  
  FUNCTION ISACTUAL RETURN BOOLEAN
  IS 
  temp nvarchar2(10) := 'false';
  BEGIN
    SELECT 'true' INTO temp FROM DUAL WHERE EXISTS (SELECT * FROM all_scheduler_jobs where job_name = 'TEST_FULL_JOB_DEFINITION' AND ENABLED='TRUE');
    if temp = 'true' then
      return true;
    else
      return false;
    end if;
  EXCEPTION WHEN OTHERS
    THEN RETURN FALSE;
  END ISACTUAL;
  
  PROCEDURE stopJob
  IS
  BEGIN
    DBMS_SCHEDULER.disable('TEST_FULL_JOB_DEFINITION');
    COMMIT;
  END;
  
  procedure deleteJob 
  as
  begin
    SYS.DBMS_SCHEDULER.DROP_JOB (job_name => 'TEST_FULL_JOB_DEFINITION');
  end;

END CHNPKG2;


---------------------------
SELECT * FROM dba_scheduler_jobs where job_name = 'TEST_FULL_JOB_DEFINITION';

begin
chnpkg2.startmove;
end;

declare
temp boolean;
temp2 boolean;
begin
  temp := CHNPKG2.ISDONE;
  temp2 := CHNPKG2.ISACTUAL;
  if temp = true then 
    dbms_output.put_line('done');
  else
    dbms_output.put_line('in process');
  end if;
  if temp2 = true then 
    dbms_output.put_line('not broken');
  else
    dbms_output.put_line('broken');
  end if;
end; 

begin
chnpkg2.stopJob;
end;

begin
chnpkg2.deleteJob;
end;